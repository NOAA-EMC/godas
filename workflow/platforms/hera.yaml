# This file configures the workflow to run on Theia

platform: !Platform
  <<: *global_platform_common

  # Evaluate: this must be "false" to ensure disk space availability logic
  # is not run unless this file is for the current platform.
  Evaluate: false

  # name: the name of this platform; this must match what the underlying
  # scripts expect.
  name: HERA

  # detect: this is a function that returns true iff the user is on GAEA
  # and false otherwise
  detect: !calc tools.isdir("/scratch1") and tools.isdir("/scratch2")

  # Additional variables to send to Rocoto XML entities or ecflow edits.
  metasched_more: !expand |
    {metasched.defvar(doc.schedvar.exclusive_queue, doc.accounting.exclusive_partition.exclusive_queue)}
    {metasched.defvar(doc.schedvar.shared_queue, doc.accounting.shared_partition.shared_queue)}
    {metasched.defvar(doc.schedvar.service_queue, doc.accounting.service_partition.service_queue)}
    {metasched.defvar(doc.schedvar.cpu_project, doc.accounting.cpu_project)}

  # CHGRP_RSTPROD_COMMAND - this specifies the command to use to
  # restrict access to NOAA "rstprod" data restriction class.
  # This only used for observation processing, data assimilation, and
  # data assimilation archiving, which are not in the public release.
  CHGRP_RSTPROD_COMMAND: "chgrp rstprod"

  # NWPROD - location of the NCEP operational "nwprod" directory, which
  # only has meaning on the NCEP WCOSS machines.  It is used to get
  # the paths to certain programs and scripts.
  NWPROD: "/scratch1/NCEPDEV/global/glopara"

  GODAS_RC: "/scratch2/NCEPDEV/marineda/godas_input"                 # Root path for external data

  config_base_extras: !expand |
    export NDATE="$NWPROD/git/NCEPLIBS-prod_util/v1.1.0/exec/ndate"
    export NHOUR="$NWPROD/git/NCEPLIBS-prod_util/v1.1.0/exec/nhour"

  partitions:
    Evaluate: false
    default_shared: !calc doc.platform.partitions.hera
    default_exclusive: !calc doc.platform.partitions.hera
    default_service: !calc doc.platform.partitions.hera_service
    default_bigmem: !calc doc.platform.partitions.hera_bigmem
    hera:
      <<: *global_partition_common
      specification: hera
      # Queues to use for each job type
      shared_queue: hera
      exclusive_queue: hera

      # Details about the scheduler on this cluster.
      scheduler_settings:
        scheduler_name: Slurm
        parallelism_name: HydraIMPI
        node_type: generic
        physical_cores_per_node: 20
        logical_cpus_per_core: 2
        hyperthreading_allowed: true
        indent_text: "  "
        memory_per_node: !calc (96*1024)

      exclusive_accounting_ref:
        queue: batch
        project: !calc doc.accounting.cpu_project
        partition: hera

      shared_accounting_ref:
        queue: batch
        project: !calc doc.accounting.cpu_project
        partition: hera

      # Generate the actual Python objects for the scheduler, parallelism,
      # and nodes:
      scheduler: !calc |
        tools.get_scheduler(scheduler_settings.scheduler_name, scheduler_settings)
      parallelism: !calc |
        tools.get_parallelism(scheduler_settings.parallelism_name, scheduler_settings)
      nodes: !calc |
        tools.node_tool_for(scheduler_settings.node_type, scheduler_settings)

    hera_service:
      <<: *global_partition_common
      specification: service
      service_queue: service
      scheduler_settings:
        scheduler_name: Slurm
        parallelism_name: HydraIMPI
        node_type: generic
        physical_cores_per_node: 1
        logical_cpus_per_core: 1
        hyperthreading_allowed: false
        indent_text: "  "
        memory_per_node: !calc (64*1024)

      service_accounting_ref:
        queue: batch
        project: !calc doc.accounting.cpu_project
        partition: service

      scheduler: !calc |
        tools.get_scheduler(scheduler_settings.scheduler_name, scheduler_settings)
      parallelism: !calc |
        tools.get_parallelism(scheduler_settings.parallelism_name, scheduler_settings)
      nodes: !calc |
        tools.node_tool_for(scheduler_settings.node_type, scheduler_settings)

    hera_bigmem:
      <<: *global_partition_common
      specification: bigmem
      service_queue: bigmem
      scheduler_settings:
        scheduler_name: Slurm
        parallelism_name: HydraIMPI
        node_type: generic
        physical_cores_per_node: 24
        logical_cpus_per_core: 24
        hyperthreading_allowed: false
        indent_text: "  "
        memory_per_node: !calc (64*1024)

      bigmem_accounting_ref:
        queue: batch
        project: !calc doc.accounting.cpu_project
        partition: bigmem

      scheduler: !calc |
        tools.get_scheduler(scheduler_settings.scheduler_name, scheduler_settings)
      parallelism: !calc |
        tools.get_parallelism(scheduler_settings.parallelism_name, scheduler_settings)
      nodes: !calc |
        tools.node_tool_for(scheduler_settings.node_type, scheduler_settings)

  # Automatically detect the least used scrub area the user can access:
  # long_term_temp - area for storage of data that must be passed
  # between jobs or shared with programs external to this workflow.
  COMROOT: !expand "{doc.user_places.COMROOT}"

  # DATAROOT - area for data that is only needed within one job:
  DATAROOT: !expand "{doc.user_places.DATAROOT}"

  # EXPROOT - Parent directory  of the expdir (experiment directory)
  EXPROOT: !expand "{doc.user_places.EXPROOT}"
