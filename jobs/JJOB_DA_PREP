#!/bin/bash
set -e

cat <<EOF
#================================================================================
#================================================================================
# JJOB_DA_PREP
#   Prepare yaml files for SOCA applications
#================================================================================
#================================================================================
EOF

module purge
source $MOD_PATH/godas.main
module list

echo
echo "The system runs at $RUNCDATE"
echo
echo "Root GODAS " ${ROOT_GODAS_DIR}
echo
echo "SOCA_STATIC="$SOCA_STATIC

mkdir -p $RUNCDATE

cd $RUNCDATE

# TODO: Put the job files for the ensemble to a temporary job-dir

cdate2window_begin(){ echo ${1:0:4}-${1:4:2}-${1:6:2}T00:00:00Z; }  # TODO: Hardcoded for 24hr DA window,
cdate2bkg_date(){ echo ${1:0:4}-${1:4:2}-${1:6:2}T12:00:00Z; }          # make generic.

# Make sure CDATE is at 12z
cdate_hh(){ echo  ${1:8:2}; }
if [ $(cdate_hh $CDATE) -eq 12 ]; then
    echo "Setting SOCA config for 24hr DA window"
else
    echo "Background date needs to be at 12Z"
    echo "CDATE="$CDATE
    exit 1
fi

# Copy SOCA static files into RUNCDATE
#---------------------------------------------------
cp -r $SOCA_STATIC/* $RUNCDATE

# Adjust date in input.nml
cp $RUNCDATE/input-ymd.nml $RUNCDATE/input-mom6.nml
YYYY=$(echo  $CDATE | cut -c1-4)
MM=$(echo $CDATE | cut -c5-6)
DD=$(echo   $CDATE | cut -c7-8)
HH=$(echo  $CDATE | cut -c9-10)
sed -i "s/YYYY/${YYYY}/g" $RUNCDATE/input-mom6.nml
sed -i "s/MM/${MM}/g" $RUNCDATE/input-mom6.nml
sed -i "s/DD/${DD}/g" $RUNCDATE/input-mom6.nml
sed -i "s/HH/${HH}/g" $RUNCDATE/input-mom6.nml

# Copy SOCA config files into RUNCDATE
#----------------------------------------------------
mkdir -p $RUNCDATE/yaml
cp -r $SOCA_CONFIG/*.yml $RUNCDATE/yaml

# Prepare SOCA configuration
#-----------------------------------------
export window_begin=$(cdate2window_begin $CDATE)
export bkg_date=$(cdate2bkg_date $CDATE)

if [ $godas_cyc = "1" ]; then
    export window_length=PT24H
else
    echo "godas_cyc not valid"
    exit 1
fi
echo "window_begin="$window_begin
echo "window_length="$window_length
echo "bkg_date="$bkg_date

## Prep yaml for bump correlation initialization
#-----------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $RUNCDATE/yaml/static_SocaError_init.yml  \
      -d ${bkg_date}

## Prep yaml for bump localization initialization
#------------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $RUNCDATE/yaml/parameters_bump_loc.yml    \
      -d ${bkg_date}

## Prep yaml for checkpointing 3DVAR analysis
#--------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $RUNCDATE/yaml/checkpointmodel.yml        \
      -d ${bkg_date}

## Prep yaml for running mom6 only forecast
#------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $RUNCDATE/yaml/forecast.yml               \
      -d ${bkg_date}

## Prep yaml for the soca_enspert
#-----------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $RUNCDATE/yaml/genenspert.yml               \
      -d ${bkg_date}

${ROOT_GODAS_DIR}/scripts/replace_KWRD_yaml.sh     \
      -i $RUNCDATE/yaml/genenspert.yml               \
      -k NO_ENS_MBR                                \
      -v ${NO_ENS_MBR}

## Prep yaml for the soca_enspert for envar
#--------------------------------------------------------------
${ROOT_GODAS_DIR}/scripts/prep_BKG_DATE_yaml.sh    \
      -i $RUNCDATE/yaml/genenspert4envar.yml       \
      -d ${bkg_date}

${ROOT_GODAS_DIR}/scripts/replace_KWRD_yaml.sh     \
      -i $RUNCDATE/yaml/genenspert4envar.yml       \
      -k NO_ENS_MBR                                \
      -v ${NO_ENS_MBR}

${ROOT_GODAS_DIR}/scripts/replace_KWRD_yaml.sh     \
      -i $RUNCDATE/yaml/genenspert4envar.yml       \
      -k WINDOW_LENGTH                             \
      -v ${window_length}

# Prep yaml for 3dvar
#-----------------------------
${ROOT_GODAS_DIR}/scripts/prep_3dvar_yaml.sh       \
      -i $RUNCDATE/yaml/3dvar_godas.yml            \
      -d $RUNCDATE

# Prep yaml for 3denvar
#----------------------------------
${ROOT_GODAS_DIR}/scripts/prep_3denvar_yaml.sh    \
      -i $RUNCDATE/yaml/3dhybenvar.yml            \
      -m $RUNCDATE/yaml/envar_member.yml          \
      -d $RUNCDATE                                \
      -n ${NO_ENS_MBR}

# Prep yaml for ensemble variance
#------------------------------------------------
# TODO: Not clean, using prep_3denvar_yaml.sh to create ens. variance yaml
${ROOT_GODAS_DIR}/scripts/prep_3denvar_yaml.sh    \
      -i $RUNCDATE/yaml/ensvariance.yml            \
      -m $RUNCDATE/yaml/ensvariance_member.yml          \
      -d $RUNCDATE                                \
      -n ${NO_ENS_MBR}


#----------------------------------
if [ $DA_METHOD = 'letkf' ]; then
   for (( mbr=1; mbr<=${NO_ENS_MBR} ; mbr++ )); do

      yaml_tmp=$RUNCDATE/yaml/hofx3d${mbr}.yml
      cp -r $RUNCDATE/yaml/hofx3d.yml ${yaml_tmp}

      ${ROOT_GODAS_DIR}/scripts/prep_hofx3d_yaml.sh   \
         -i ${yaml_tmp}                               \
         -d ${RUNCDATE}                               \
         -n ${mbr}

      jjob_tmp=${ROOT_GODAS_DIR}/jobs/JJOB_PREP_LETKF${mbr}
      cp -f ${ROOT_GODAS_DIR}/jobs/JJOB_PREP_LETKF ${jjob_tmp}
      sed -i "s/MEMBER_NO/${mbr}/g" ${jjob_tmp}
   done
fi

# TODO: Prep yaml for letkf
#----------------------------------

cat <<EOF
#================================================================================
#================================================================================
#   Get background/initial conditions
#================================================================================
#================================================================================
EOF

# Get IC
#-------
# Check if there was a previous cycle
# TODO: Split cases, mom6solo and mom6cice5
if [ -d ../NEXT_IC ]; then
    # Get IC from previous cycle
    case $FCSTMODEL in
       "MOM6solo")
           cp ../NEXT_IC/cice_bkg.nc $RUNCDATE/INPUT_MOM6/cice_bkg.nc
           ;;
       "MOM6CICE5")
           icerst=$(cat ../NEXT_IC/restart/ice.restart_file)
           cp ../NEXT_IC/$icerst $RUNCDATE/INPUT_MOM6/cice_bkg.nc
           ;;
    esac
    cp ../NEXT_IC/MOM*.nc $RUNCDATE/INPUT_MOM6/

    if [ -d ../NEXT_ENS ]; then
        mv ../NEXT_ENS/* $RUNCDATE/Data/
    fi
    rm -rf ../NEXT_ENS
    rm -rf ../NEXT_IC
else
    # If this is the first cycle, continue below
    # TODO: This is a hack ... in case you had not noticed!
    #       Grab IC's from somewhere else ...
    # Ocean bkg files
    #----------------
    case $FCSTMODEL in
       "MOM6solo")
           ln -sf $SOCA_STATIC/INPUT/MOM.res*.nc $RUNCDATE/INPUT_MOM6/

           # Initial Ocean and Ice perturbations
           #---------------------------------------------------
           ln -sf $SOCA_STATIC/ens/*.nc $RUNCDATE/Data/

           # Sea-ice bkg files
           #------------------
           cp $SOCA_STATIC/INPUT_MOM6/cice_bkg.nc $RUNCDATE/INPUT_MOM6/cice_bkg.nc
           ;;
       "MOM6CICE5")
           cp $RUNCDATE/fcst/INPUT/MOM*.nc $RUNCDATE/INPUT_MOM6/
           icerst=$(cat $RUNCDATE/fcst/restart/ice.restart_file)
           cp $RUNCDATE/fcst/$icerst $RUNCDATE/INPUT_MOM6/cice_bkg.nc
           ;;
    esac
fi

# Make cice_bkg.nc fms compliant
if [ $FCSTMODEL = 'MOM6CICE5' ]; then
   ncks -O -C -v aicen,vicen,vsnon ./INPUT_MOM6/cice_bkg.nc $RUNCDATE/INPUT_MOM6/cice_bkg.nc
   ncrename -O -d ni,xaxis_1 -d nj,yaxis_1 -d ncat,zaxis_1 $RUNCDATE/INPUT_MOM6/cice_bkg.nc
   ncecat -O -v aicen,vicen,vsnon -u Time $RUNCDATE/INPUT_MOM6/cice_bkg.nc $RUNCDATE/INPUT_MOM6/cice_bkg.nc
   ncks -A -v Time,xaxis_1,yaxis_1,zaxis_1 $RUNCDATE/INPUT_MOM6/ice_model.res.nc $RUNCDATE/INPUT_MOM6/cice_bkg.nc
fi
